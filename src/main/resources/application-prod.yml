nacos:
  config:
    server-addr: 127.0.0.1:8848

spring:
  datasource:
    primary:
      # 数据源名称
      name: primary
      # 可根据url自动匹配，一般不需要设置
      #driver-class-name: com.mysql.jdbc.Driver
      # 连接数据库的url，不同数据库不一样。例如：
      #mysql : jdbc:mysql://10.20.153.104:3306/druid2
      #oracle : jdbc:oracle:thin:@10.20.149.85:1521:ocnauto
      url: jdbc:mysql://127.0.0.1:3306/test1
      # 连接数据库的用户名
      username: root
      # 连接数据库的密码，如果你不希望密码直接写在配置文件中，可以使用ConfigFilter。详细参见https://github.com/alibaba/druid/wiki/%E4%BD%BF%E7%94%A8ConfigFilter
      password: LsJh/PyKfDcPClMovaBcyE+5inII08RCGdDb0pRyyWVg8Wsc+n4KJYFwXfFn5BN8HwwVRCpsH3DGOL+gphXFaQ==
      # 启用密码加密，key为加密公钥，password为加密后密文
      connectionProperties: config.decrypt=true;config.decrypt.key=MFwwDQYJKoZIhvcNAQEBBQADSwAwSAJBAJpXDHaP2myqKNvoE3TTNJeHSKLpSnzfEKONe/wDS1ftUn5c4drsfboCQTS8esXe8MDMaQmfUxx0TXdxVkIaaw8CAwEAAQ==
      # 初始化时建立物理连接的个数。初始化发生在显示调用init方法，或者第一次getConnection时
      initial-size: 1
      # 最大连接池数量
      max-active: 20
      # 最小连接池数量
      min-idle: 1
      # 获取连接时最大等待时间，单位毫秒。配置了maxWait之后，缺省启用公平锁，并发效率会有所下降，如果需要可以通过配置useUnfairLock属性为true使用非公平锁
      max-wait: 60000
      # 有两个含义：
      # 1) Destroy线程会检测连接的间隔时间，如果连接空闲时间大于等于minEvictableIdleTimeMillis则关闭物理连接。
      # 2) testWhileIdle的判断依据，详细看testWhileIdle属性的说明
      time-between-eviction-runs-millis: 60000
      # 连接保持空闲而不被驱逐的最小时间
      min-evictable-idle-time-millis: 30000
      # 用来检测连接是否有效的sql，要求是一个查询语句，常用select 'x'。如果validationQuery为null，testOnBorrow、testOnReturn、testWhileIdle都不会起作用
      # Oracle	select 1 from dual
      # mysql	select 1
      # microsoft sql	select 1
      # postgresql	select version();
      validation-query: select 1
      # 单位：秒，检测连接是否有效的超时时间。底层调用jdbc Statement对象的void setQueryTimeout(int seconds)方法
      validationQueryTimeout: 60
      # 申请连接时会执行validationQuery检测连接是否有效,开启会降低性能,默认为true
      test-on-borrow: false
      # 归还连接时会执行validationQuery检测连接是否有效,开启会降低性能,默认为true
      test-on-return: false
      #申请连接的时候检测，如果空闲时间大于timeBetweenEvictionRunsMillis，执行validationQuery检测连接是否有效。
      test-while-idle: true
      # 连接池中的minIdle数量以内的连接，空闲时间超过minEvictableIdleTimeMillis，则会执行keepAlive操作
      keepAlive: false
      # 是否缓存preparedStatement，也就是PSCache。PSCache对支持游标的数据库性能提升巨大，比如说oracle。在mysql下建议关闭。
      pool-prepared-statements: false
      # 要启用PSCache，必须配置大于0，当大于0时，poolPreparedStatements自动触发修改为true。在Druid中，不会存在Oracle下PSCache占用内存过多的问题，可以把这个数值配置大一些，比如说100
      # maxPoolPreparedStatementPerConnectionSize: 100
      max-open-prepared-statements: 20
      # 异步初始化
      asyncInit: true
      # 异步关闭连接
      async-close-connection-enable: true
      # 物理连接初始化的时候执行的sql
      # connectionInitSqls:
      # 属性类型是字符串，通过别名的方式配置扩展插件，常用的插件有：
      # 监控统计用的filter:stat
      # 日志用的filter:slf4j
      # 防御sql注入的filter:wall
      filters: stat,wall,slf4j,config

    secondary:
      # 数据源名称
      name: secondary
      # 可根据url自动匹配，一般不需要设置
      #driver-class-name: com.mysql.jdbc.Driver
      # 连接数据库的url，不同数据库不一样。例如：
      #mysql : jdbc:mysql://10.20.153.104:3306/druid2
      #oracle : jdbc:oracle:thin:@10.20.149.85:1521:ocnauto
      url: jdbc:mysql://127.0.0.1:3306/test2
      # 连接数据库的用户名
      username: root
      # 连接数据库的密码，如果你不希望密码直接写在配置文件中，可以使用ConfigFilter。详细参见https://github.com/alibaba/druid/wiki/%E4%BD%BF%E7%94%A8ConfigFilter
      password: GytR5Jo21DrWbf9Tv9/hp0ECPBwtApo/M2+XhvqDJ46sEwpn1Vls5arr/75s2hJtIrLY8DZJ5oLu60mzcDrIGQ==
      # 启用密码加密，key为加密公钥，password为加密后密文
      connectionProperties: config.decrypt=true;config.decrypt.key=MFwwDQYJKoZIhvcNAQEBBQADSwAwSAJBALyahexA+lDGoBtEQOv9aj8EGq2jARQJZ+OLmp2ffHAsDmFuoWtbn7fEixEwvIsWTtOYpNES9IQkjSgPYBPUIAkCAwEAAQ==
      # 初始化时建立物理连接的个数。初始化发生在显示调用init方法，或者第一次getConnection时
      initial-size: 1
      # 最大连接池数量
      max-active: 20
      # 最小连接池数量
      min-idle: 1
      # 获取连接时最大等待时间，单位毫秒。配置了maxWait之后，缺省启用公平锁，并发效率会有所下降，如果需要可以通过配置useUnfairLock属性为true使用非公平锁
      max-wait: 60000
      # 有两个含义：
      # 1) Destroy线程会检测连接的间隔时间，如果连接空闲时间大于等于minEvictableIdleTimeMillis则关闭物理连接。
      # 2) testWhileIdle的判断依据，详细看testWhileIdle属性的说明
      time-between-eviction-runs-millis: 60000
      # 连接保持空闲而不被驱逐的最小时间
      min-evictable-idle-time-millis: 30000
      # 用来检测连接是否有效的sql，要求是一个查询语句，常用select 'x'。如果validationQuery为null，testOnBorrow、testOnReturn、testWhileIdle都不会起作用
      # Oracle	select 1 from dual
      # mysql	select 1
      # microsoft sql	select 1
      # postgresql	select version();
      validation-query: select 1
      # 单位：秒，检测连接是否有效的超时时间。底层调用jdbc Statement对象的void setQueryTimeout(int seconds)方法
      validationQueryTimeout: 60
      # 申请连接时会执行validationQuery检测连接是否有效,开启会降低性能,默认为true
      test-on-borrow: false
      # 归还连接时会执行validationQuery检测连接是否有效,开启会降低性能,默认为true
      test-on-return: false
      #申请连接的时候检测，如果空闲时间大于timeBetweenEvictionRunsMillis，执行validationQuery检测连接是否有效。
      test-while-idle: true
      # 连接池中的minIdle数量以内的连接，空闲时间超过minEvictableIdleTimeMillis，则会执行keepAlive操作
      keepAlive: false
      # 是否缓存preparedStatement，也就是PSCache。PSCache对支持游标的数据库性能提升巨大，比如说oracle。在mysql下建议关闭。
      pool-prepared-statements: false
      # 要启用PSCache，必须配置大于0，当大于0时，poolPreparedStatements自动触发修改为true。在Druid中，不会存在Oracle下PSCache占用内存过多的问题，可以把这个数值配置大一些，比如说100
      # maxPoolPreparedStatementPerConnectionSize: 100
      max-open-prepared-statements: 20
      # 异步初始化
      asyncInit: true
      # 异步关闭连接
      async-close-connection-enable: true
      # 物理连接初始化的时候执行的sql
      # connectionInitSqls:
      # 属性类型是字符串，通过别名的方式配置扩展插件，常用的插件有：
      # 监控统计用的filter:stat
      # 日志用的filter:slf4j
      # 防御sql注入的filter:wall
      filters: stat,wall,slf4j,config

    thirdary:
      # 数据源名称
      name: thirdary
      # 可根据url自动匹配，一般不需要设置
      #driver-class-name: com.mysql.jdbc.Driver
      # 连接数据库的url，不同数据库不一样。例如：
      #mysql : jdbc:mysql://10.20.153.104:3306/druid2
      #oracle : jdbc:oracle:thin:@10.20.149.85:1521:ocnauto
      url: jdbc:mysql://127.0.0.1:3306/test3
      # 连接数据库的用户名
      username: root
      # 连接数据库的密码，如果你不希望密码直接写在配置文件中，可以使用ConfigFilter。详细参见https://github.com/alibaba/druid/wiki/%E4%BD%BF%E7%94%A8ConfigFilter
      password: JWqzqBt7rUgwnR5yKtNwRe/s1RwBKS7VUxQ7Hj1FOG4BcYugasiuSU+82avCV4lGGTWbKWHSJT3tjd9WVnA9sQ==
      # 启用密码加密，key为加密公钥，password为加密后密文
      connectionProperties: config.decrypt=true;config.decrypt.key=MFwwDQYJKoZIhvcNAQEBBQADSwAwSAJBAIeA+ArKsjcVTFj8KvwJct4RtIS6U6sK+ay9x44s8HabrsNcMCPzm+7AqjkIaP/j1VR30CzlY08MBC5OIXNsj/sCAwEAAQ==
      # 初始化时建立物理连接的个数。初始化发生在显示调用init方法，或者第一次getConnection时
      initial-size: 1
      # 最大连接池数量
      max-active: 20
      # 最小连接池数量
      min-idle: 1
      # 获取连接时最大等待时间，单位毫秒。配置了maxWait之后，缺省启用公平锁，并发效率会有所下降，如果需要可以通过配置useUnfairLock属性为true使用非公平锁
      max-wait: 60000
      # 有两个含义：
      # 1) Destroy线程会检测连接的间隔时间，如果连接空闲时间大于等于minEvictableIdleTimeMillis则关闭物理连接。
      # 2) testWhileIdle的判断依据，详细看testWhileIdle属性的说明
      time-between-eviction-runs-millis: 60000
      # 连接保持空闲而不被驱逐的最小时间
      min-evictable-idle-time-millis: 300000
      # 用来检测连接是否有效的sql，要求是一个查询语句，常用select 'x'。如果validationQuery为null，testOnBorrow、testOnReturn、testWhileIdle都不会起作用
      # Oracle	select 1 from dual
      # mysql	select 1
      # microsoft sql	select 1
      # postgresql	select version();
      validation-query: select 1
      # 单位：秒，检测连接是否有效的超时时间。底层调用jdbc Statement对象的void setQueryTimeout(int seconds)方法
      validationQueryTimeout: 60
      # 申请连接时会执行validationQuery检测连接是否有效,开启会降低性能,默认为true
      test-on-borrow: false
      # 归还连接时会执行validationQuery检测连接是否有效,开启会降低性能,默认为true
      test-on-return: false
      #申请连接的时候检测，如果空闲时间大于timeBetweenEvictionRunsMillis，执行validationQuery检测连接是否有效。
      test-while-idle: true
      # 连接池中的minIdle数量以内的连接，空闲时间超过minEvictableIdleTimeMillis，则会执行keepAlive操作
      keepAlive: false
      # 是否缓存preparedStatement，也就是PSCache。PSCache对支持游标的数据库性能提升巨大，比如说oracle。在mysql下建议关闭。
      pool-prepared-statements: false
      # 要启用PSCache，必须配置大于0，当大于0时，poolPreparedStatements自动触发修改为true。在Druid中，不会存在Oracle下PSCache占用内存过多的问题，可以把这个数值配置大一些，比如说100
      # maxPoolPreparedStatementPerConnectionSize: 100
      max-open-prepared-statements: 20
      # 异步初始化
      asyncInit: true
      # 异步关闭连接
      async-close-connection-enable: true
      # 物理连接初始化的时候执行的sql
      # connectionInitSqls:
      # 属性类型是字符串，通过别名的方式配置扩展插件，常用的插件有：
      # 监控统计用的filter:stat
      # 日志用的filter:slf4j
      # 防御sql注入的filter:wall
      filters: stat,wall,slf4j,config

    druid:
      # WebStatFilter配置，说明请参考Druid Wiki，配置_配置WebStatFilter
      web-stat-filter:
        # 是否启用StatFilter默认值false
        enabled: true
        # 添加过滤规则
        url-pattern: "/*"
        # 忽略过滤格式, 排除一些不必要的url
        exclusions: "*.js,*.gif,*.jpg,*.png,*.css,*.ico,/druid/*"
        # 是否启用session统计
        session-stat-enable: false
        # 最大session统计个数，默认1000
        # session-stat-max-count: 1000
        # 根据需要，把其中的xxx.user修改为你user信息保存在session中的sessionName。
        # 注意：如果你session中保存的是非string类型的对象，需要重载toString方法。
        # principal-session-name: xxx.user
        # 如果你的user信息保存在cookie中，你可以配置principalCookieName，使得druid知道当前的user是谁；根据需要，把其中的xxx.user修改为你user信息保存在cookie中的cookieName
        # principal-cookie-name: xxx.user
        # 监控单个url调用的sql列表
        profile-enable: true

      # StatViewServlet配置，说明请参考Druid Wiki，配置_StatViewServlet配置
      stat-view-servlet:
        #是否启用StatViewServlet（监控页面）默认值为false（考虑到安全问题默认并未启动，如需启用建议设置密码或白名单以保障安全）
        enabled: true
        # 访问内置监控页面，默认内置监控页面的首页是/druid/index.html
        url-pattern: "/druid/*"
        # 是否允许清空统计数据
        reset-enable: false
        # 用户名
        login-username: ztemds
        # 密码
        login-password: ztemds@1203
        # StatViewSerlvet展示出来的监控信息比较敏感，是系统运行的内部情况，如果你需要做访问控制，可以配置allow和deny这两个参数
        # deny优先于allow，如果在deny列表中，就算在allow列表中，也会被拒绝。如果allow没有配置或者为空，则允许所有访问
        # 配置的格式 -> <IP> 或者 <IP>/<SUB_NET_MASK_size>；例如 128.242.127.1/24 24表示，前面24位是子网掩码，比对的时候，前面24位相同就匹配
        # 不支持IPv6
        # allow:
        # deny: